class Frames{animate(){return new Promise((e=>{const n=this,t=Date.now(),s=this.frames.length;let o=0;const a=async()=>{let r=n.frames.shift();r?(n.framesDone.push(r),Promise.resolve(n.animationFunction(r,o++,s)).then((e=>window.requestAnimationFrame(a)))):Promise.all(n.framesDone).then((s=>{n.frames=n.framesDone,n.framesDone=[],e([n,Date.now()-t])}))};window.requestAnimationFrame(a)}))}loop(e=(e=>!0),n){return new Promise((t=>{const s=this,o=Date.now();let a=0;const r=async()=>{e(a)?s.animate().then((t=>Promise.resolve(n(a++,!e(a))).then((e=>r())))):t([s,Date.now()-o])};r()}))}constructor(e,n){this.framesDone=[],this.frames=e,this.animationFunction=n}}export default Frames;